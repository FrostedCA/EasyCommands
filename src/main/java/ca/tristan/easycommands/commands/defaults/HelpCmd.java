package ca.tristan.easycommands.commands.defaults;

import ca.tristan.easycommands.commands.slash.SlashExecutor;
import ca.tristan.easycommands.EasyCommands;
import ca.tristan.easycommands.commands.EventData;
import ca.tristan.easycommands.commands.prefix.PrefixExecutor;
import net.dv8tion.jda.api.EmbedBuilder;

import java.awt.*;

public class HelpCmd extends SlashExecutor {

    private final EasyCommands easyCommands;

    public HelpCmd(EasyCommands easyCommands) {
        this.easyCommands = easyCommands;
    }

    @Override
    public String getName() {
        return "help";
    }

    @Override
    public String getDescription() {
        return "/help to get help with the commands.";
    }

    @Override
    public boolean isOwnerOnly() {
        return false;
    }

    @Override
    public void execute(EventData data) {
        EmbedBuilder builder = new EmbedBuilder();
        builder.setTitle("Help - " + data.getGuild().getName());
        builder.setColor(Color.GREEN);
        builder.addField("Slash Commands", "--------------------", false);
        easyCommands.getExecutors().forEach((name, commandExecutor) -> {
            if(commandExecutor instanceof SlashExecutor && !commandExecutor.isOwnerOnly() && !commandExecutor.getName().equals("help") && (commandExecutor.getDescription() != null || !commandExecutor.getDescription().isEmpty())) {
                if(!commandExecutor.getAliases().contains(name)) {
                    builder.addField("/" + name, commandExecutor.getDescription(), false);
                }
            }
        });
        builder.addField("Prefix Commands", "--------------------", false);
        easyCommands.getExecutors().forEach((name, commandExecutor) -> {
            if(commandExecutor instanceof PrefixExecutor && !commandExecutor.isOwnerOnly() && !commandExecutor.getName().equals("help") && (commandExecutor.getDescription() != null || !commandExecutor.getDescription().isEmpty())) {
                if(!commandExecutor.getAliases().contains(name)) {
                    builder.addField(easyCommands.getPrefixCommands().getPrefix() + name, commandExecutor.getDescription(), false);
                }
            }
        });
        if(builder.getFields().isEmpty()) {
            builder.setDescription("There's no command to show for this server.");
        }else {
            builder.setDescription("Here's a list of command you might be able to use on this server.");
        }
        builder.setFooter("This help message was generated by EasyCommands.", "https://raw.githubusercontent.com/FrostedCA/EasyCommands/master/ECLogo_new.png");
        data.reply(builder.build(), true).queue();
    }

}
